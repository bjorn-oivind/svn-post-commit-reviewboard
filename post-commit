#!/usr/bin/env ruby

@repo_url = "http://svn/repo"
@reviewboard_url = "http://reviewboard"
@reviewboard_username = 'user'
@reviewboard_password = 'password'
@reviewboard_target_groups = ['taco', 'shrimp']

require 'rubygems'
require 'bundler/setup'

require 'rest_client'
require 'json'

# monkey patch Tempfile to return "diff" as the original_filename
class Tempfile
  def original_filename
    "diff"
  end
end

def post_review
    # find the author
    info = %x[/usr/bin/svnlook info -r #{@rev} #{@repo_path}]
    submit_as = info.lines.first.chomp
    # grab the diff
    diff = %x[/usr/bin/svnlook diff -r #{@rev} #{@repo_path}]
    # have code been modified?
    return unless /^(?:Modified|Added): (.*\.(?:cpp|hpp|h|c|cs|pl|py|sh))$|(Makefile)$/ =~ diff
    # grab the log message
    log = %x[/usr/bin/svnlook log -r #{@rev} #{@repo_path}]

    # set up a resource
    reviewboard = RestClient::Resource.new(@reviewboard_url, :user => @reviewboard_username, :password => @reviewboard_password, :headers => { :accept => 'application/json', :accept_encoding => ''})
    api = reviewboard['api/']
    review_requests = api['review-requests/']

    # create a new review request
    parsed = JSON.parse review_requests.post :multipart => true, :repository => @repo_url, :submit_as => submit_as
    return unless parsed["review_request"]["id"]

    our_id = parsed["review_request"]["id"]
    review = review_requests["#{our_id}/"]

    review_draft = review['draft/']
    # update the draft with the information on hand
    parsed = JSON.parse review_draft.put :multipart => true, :target_groups => @reviewboard_target_groups.join(','), :summary => log.lines.first.chomp, :description => log
    return unless parsed["stat"] == "ok"

    review_diffs = review['diffs/']
    diff_file = Tempfile.new('diff')
    begin
      diff_file.write diff
      diff_file.rewind

      # use the file variant of the multipart class, since reviewboard did not work with just "path" and set the basedir to / since all diffs are relative to this.
      parsed = JSON.parse review_diffs.post :multipart => true, "path" => diff_file, "basedir" => "/"
      return unless parsed["stat"] == "ok"
    ensure
      diff_file.close
      diff_file.unlink
    end

    # publish the review.
    parsed = JSON.parse review_draft.put :multipart => true, :public => 1
    return unless parsed["stat"] == "ok"

    p "Posted review #{our_id}."
end

@repo_path = ARGV[0]
@rev = ARGV[1]

post_review

